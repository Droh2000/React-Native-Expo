Lo haremos es la instalacion de los estilos de Nativewind para poder usar Tailwindcss en Expo
para esto ejecutamos el siguiente comando:
    * npx expo install nativewind tailwindcss@^3.4.17 react-native-reanimated@3.16.2 react-native-safe-area-context
De aqui seguimos los pasos de la documentacion oficial

Ademas de la aplicacion de TailwindCss podemos aplicar cambios y configuraciones globales en el tema y tener muchas cosas personalizadas

En este punto sabemos que el app/index.tsx es la pantalla que estamos viendo en este momento, cada archico que creemos dentro de la carpeta APP
termina siendo una ruta, el nombre que le demos al archivo no es importante, lo que si es importante es que la exportacion se por DEFAULT

Si vemos que el contenido de la pagina se va muy arriba del celular y se oculta con la camara frontal, para solucionar eso podriamos encerrar el Slot que regresamos en el _layout.tsx
dentro del SafeAreaView, pero no se acostumbra hacer eso porque puede que en ciertas pantallas si quieramos que tape esa parte, asi que eso depende de la pantalla
asi que el SafeArea se coloca segun la pantalla que si queremos que tape o no la parte de arriba del celular

En la carpeta "app" hay que poner orden desde el inicio para que no descontrole, por eso lo componentes o las nuevas pantallas no las creamos directamente ahi sino dentro de una carpeta
y dentro el nombre de la pantalla se la cambiamos de "products.tsx" a "index.tsx" para que cuando mandemos al directorio de la carpeta automaticamente busque el archivo llamado "index"
ademas asi, si queremos un diseÃ±o que se aplique a todas las paginas que tengan productos o de esta misma categoria entcones dentro de esta carpeta nos podemos crear otro archivo "_layout.tsx"
y aplicar esa configuracion a todos los archivos que esten dentro de la carpeta "products", hay que asegurarse que el nombre de las carpetas y de los componentes esten en minusculas
Hay algunas configuraciones que podemos indicar en el nombre del archivo
    * Cuando el nombre esta entre "()" quiere decir que ese URL no sea visible en la navegacion por el URL, si dentro de "app" no tendriamos el archivo "index.tsx" creado, la aplicacion por automatico
      toma el Index de la carpeta que tenga el nombre entre perentesis, si tenemos varias carpetas entre () tomara la que alfabeticamente este primero

La carpeta (stack) que creamos es para que sea un agrupador y no salga visiblemente en las rutas, ya que ahi metimos todas las carpetas de nuestros componentes

Vamos a ver como agregar diferentes formas de menus a la aplicacion

TABS

    La estructura que vamos a estar buscando es algo como esto:
        - app
            * _layout.tsx       -> Aqui definimos lo que es global
            - (tabs)            -> El nombre esta entre () para indicar que su contenido no es parte del URL 
                * _layout.tsx   -> Archivo de los Tabs
                * index.tsx     -> Apuntaria al Home
                * settings.tsx  -> Pagina de al lado del boton del Home

    Todo depende de como queremos que funcione el sistema de TABS, podemos tenerlos unicamente entre paginas, o en toda la aplicacion
    Como en este caso dentro de la carpeta "app" nuestro punto de inicio seria el "(stack)" pero queremos tener un TAB que incluya toda la navegacion
    que tangamos, por eso nos creamos la carpeta "tabs" sin parentesis porque sera parte del URL, dentro de esta carpeta nos creamos las paginas 
    que queremos mostrar
