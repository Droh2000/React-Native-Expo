En este caso ejecutamos el comando que viene por defecto
    - npx create-expo-app@latest 
Esto nos crea una aplicacion por defecto en expo, anteriormente vimos que teniamos la bandera de --template
pero cuando nosotros creamos la aplicacion con el comando por defecto, esto automaticamente nos va a incluir el router
que es muy probable que lo utilizemos, ademas de otras cosas principales que requerimos  

Para ejecutar el proyecto:
    - npm start (Igual este nunca funciona, es mejor con el de tunel)

En este caso por como creamos el proyecto, tambien podemos abrir el proyecto desde el navegador
precionando la tecla: w

Este proyecto por defecto nos crea muchas carpetas y codigo
Dentro de la carpeta "app" por ver el nombre de los archivos y de la carpeta, tenemos este sistema parecido al de Next.js
donde se les da unos nombres especificos a los componentes que creamos, esto es asi por que es como ExporRouter detecta que rutas usar
Tenemos una pagina de not-found que sera el componente que se ejecutar cuando la ruta a la que estamos quierendo navegar no existe
Dentro de la carpeta de (tabs) tenemos los archivos de:
    * explore: Encargado de la navegacion entre pestanas
    * index: es el archivo que busca por defecto cuando se ingrese en la carpeta
assets: Tenemos recursos estaticos de imagenes y fuentas
components:  Tenemos una parte de testin para probar los componentes, la parte de la navegacion y otros elementos de la interface
constant: Colores de la aplicacion que vamos a utilizar
hook: Para los custom hooks
script: El archivo que contiene nos permite resetear el proyecto

* La carpeta de (tabs) la borramos y otros archivos y solo dejamos el _layout
    Despues de hacer esto veremos en la aplicacion que no nos esta dando un error, solo nos sale una pantalla donde se indica que la pantalla no existe
    ademas que vemos un header, este esta definido en el archivo _layout.tsx
        Dentro de este archivo encontramos dos componentes, uno es para usar fuentes personalizadas que la toma de la carpeta font donde estan las fuentes dentro de assets
        Ademas tenemos el hook del "useFonts" donde cargamos la fuente

        // Prevent the splash screen from auto-hiding before asset loading is complete.
        SplashScreen.preventAutoHideAsync();

        // Si quitamos esta exportacion por defecto, se nos crasheara la aplicacion
        export default function RootLayout() {
        const colorScheme = useColorScheme();
        // Con este argumento que desestructuramos nos dira cuando la fuente fue cargada
        const [loaded] = useFonts({
            SpaceMono: require('../assets/fonts/SpaceMono-Regular.ttf'),
        });
        // Con este cambiara ya hasta que la fuente este cargada
        useEffect(() => {
            if (loaded) {
            // Cuando ya este cargada la fuente oculta este SplashScreen, esto no solo lo podemos ocultar cuando tenemos la fuente sino cuando 
            // ya tenemos los datos iniciales o para determinar la sesion del usuario, o algo por el estilo
            // (El SplashScreen es la imagen de carga de la aplicacion ) 
            SplashScreen.hideAsync();
            }
        }, [loaded]);

La carpeta "app" es nuestro sistema de rutas de la aplicacion, aqui no nombramos los componentes con la letra mayuscula

Con esto vemos que no tenemos que configurar nada del Router si estamos usando la configuracion de la creacion por defecto del proyecto

Queremos que cuando toquemos los botones, sentir la vibracion de que se tocaron pero lograr eso tenemos que instalar un paquete de tercero
ademas en los celulares de androir en la parte de abajo de la aplicacion tenemos que la barra se mira de color blanco, eso tambien lo vamos a cambiar
Para lo de la barra blanca instalamos Expo NavigationBar
    * npx expo install expo-navigation-bar
Para agregarle el efecto de vibracion al tocar el boton
    * npx expo install expo-haptics